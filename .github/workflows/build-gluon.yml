
# Update this file after adding/removing/renaming a target by running
# `contrib/list-targets.sh | contrib/generate-actions.py > .github/workflows/build-gluon.yml`
name: Build Gluon
on:
  push:
    tags:
      - '*'
jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      tag_name: ${{ steps.tag_name.outputs.tag_name }}
    steps:
      - name: Compute tag name
        id: tag_name
        run: echo ::set-output name=tag_name::$(echo ${{ github.ref }} | sed 's!refs/tags/!!')
        
      - name: Check if this is an unstable release
        id: check_unstable
        run: |
         if [[ ${{ steps.tag_name.outputs.tag_name }} =~ ^unstable ]]; then
           echo ::set-output name=unstable_release::true
         else 
           echo ::set-output name=unstable_release::false
         fi
          
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ steps.tag_name.outputs.tag_name }}
          draft: false
          prerelease: ${{ steps.check_unstable.outputs.unstable_release }}

  ar71xx-generic:
    name: ar71xx-generic
    runs-on: ubuntu-latest
    needs: create-release
    steps:
      
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set GLUON_BRANCH environment variable
        run: echo ::set-env name=GLUON_BRANCH::master

      - name: Set GLUON_RELEASE environment variable
        run: echo ::set-env name=GLUON_RELEASE::${BUILD_VERSION:-XX}+${GLUON_BRANCH:-master}$(date '+%Y%m%d%H%M')
        env:
          BUILD_VERSION: ${{ needs.create-release.outputs.tag_name }}

      - name: Install apt Dependencies
        run: sudo contrib/actions/setup-dependencies.sh

      - name: Build
        run: contrib/actions/run-build.sh ar71xx-generic

      - name: Archive build logs
        if: ${{ !cancelled() }}
        uses: actions/upload-artifact@v2
        with:
          name: ar71xx-generic_logs
          path: gluon/openwrt/logs

      - name: Archive build output
        uses: actions/upload-artifact@v2
        with:
          name: ar71xx-generic_output
          path: gluon/output
      
      - name: build-tar
        run: tar cJf ar71xx-generic.tar.xz -C gluon/output .
      
      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }} 
          asset_path: ./ar71xx-generic.tar.xz
          asset_name: ar71xx-generic.tar.xz
          asset_content_type: application/x-xz

  ar71xx-nand:
    name: ar71xx-nand
    runs-on: ubuntu-latest
    needs: create-release
    steps:
      
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set GLUON_BRANCH environment variable
        run: echo ::set-env name=GLUON_BRANCH::master

      - name: Set GLUON_RELEASE environment variable
        run: echo ::set-env name=GLUON_RELEASE::${BUILD_VERSION:-XX}+${GLUON_BRANCH:-master}$(date '+%Y%m%d%H%M')
        env:
          BUILD_VERSION: ${{ needs.create-release.outputs.tag_name }}

      - name: Install apt Dependencies
        run: sudo contrib/actions/setup-dependencies.sh

      - name: Build
        run: contrib/actions/run-build.sh ar71xx-nand

      - name: Archive build logs
        if: ${{ !cancelled() }}
        uses: actions/upload-artifact@v2
        with:
          name: ar71xx-nand_logs
          path: gluon/openwrt/logs

      - name: Archive build output
        uses: actions/upload-artifact@v2
        with:
          name: ar71xx-nand_output
          path: gluon/output
      
      - name: build-tar
        run: tar cJf ar71xx-nand.tar.xz -C gluon/output .
      
      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }} 
          asset_path: ./ar71xx-nand.tar.xz
          asset_name: ar71xx-nand.tar.xz
          asset_content_type: application/x-xz

  ath79-generic:
    name: ath79-generic
    runs-on: ubuntu-latest
    needs: create-release
    steps:
      
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set GLUON_BRANCH environment variable
        run: echo ::set-env name=GLUON_BRANCH::master

      - name: Set GLUON_RELEASE environment variable
        run: echo ::set-env name=GLUON_RELEASE::${BUILD_VERSION:-XX}+${GLUON_BRANCH:-master}$(date '+%Y%m%d%H%M')
        env:
          BUILD_VERSION: ${{ needs.create-release.outputs.tag_name }}

      - name: Install apt Dependencies
        run: sudo contrib/actions/setup-dependencies.sh

      - name: Build
        run: contrib/actions/run-build.sh ath79-generic

      - name: Archive build logs
        if: ${{ !cancelled() }}
        uses: actions/upload-artifact@v2
        with:
          name: ath79-generic_logs
          path: gluon/openwrt/logs

      - name: Archive build output
        uses: actions/upload-artifact@v2
        with:
          name: ath79-generic_output
          path: gluon/output
      
      - name: build-tar
        run: tar cJf ath79-generic.tar.xz -C gluon/output .
      
      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }} 
          asset_path: ./ath79-generic.tar.xz
          asset_name: ath79-generic.tar.xz
          asset_content_type: application/x-xz

  brcm2708-bcm2708:
    name: brcm2708-bcm2708
    runs-on: ubuntu-latest
    needs: create-release
    steps:
      
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set GLUON_BRANCH environment variable
        run: echo ::set-env name=GLUON_BRANCH::master

      - name: Set GLUON_RELEASE environment variable
        run: echo ::set-env name=GLUON_RELEASE::${BUILD_VERSION:-XX}+${GLUON_BRANCH:-master}$(date '+%Y%m%d%H%M')
        env:
          BUILD_VERSION: ${{ needs.create-release.outputs.tag_name }}

      - name: Install apt Dependencies
        run: sudo contrib/actions/setup-dependencies.sh

      - name: Build
        run: contrib/actions/run-build.sh brcm2708-bcm2708

      - name: Archive build logs
        if: ${{ !cancelled() }}
        uses: actions/upload-artifact@v2
        with:
          name: brcm2708-bcm2708_logs
          path: gluon/openwrt/logs

      - name: Archive build output
        uses: actions/upload-artifact@v2
        with:
          name: brcm2708-bcm2708_output
          path: gluon/output
      
      - name: build-tar
        run: tar cJf brcm2708-bcm2708.tar.xz -C gluon/output .
      
      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }} 
          asset_path: ./brcm2708-bcm2708.tar.xz
          asset_name: brcm2708-bcm2708.tar.xz
          asset_content_type: application/x-xz

  brcm2708-bcm2709:
    name: brcm2708-bcm2709
    runs-on: ubuntu-latest
    needs: create-release
    steps:
      
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set GLUON_BRANCH environment variable
        run: echo ::set-env name=GLUON_BRANCH::master

      - name: Set GLUON_RELEASE environment variable
        run: echo ::set-env name=GLUON_RELEASE::${BUILD_VERSION:-XX}+${GLUON_BRANCH:-master}$(date '+%Y%m%d%H%M')
        env:
          BUILD_VERSION: ${{ needs.create-release.outputs.tag_name }}

      - name: Install apt Dependencies
        run: sudo contrib/actions/setup-dependencies.sh

      - name: Build
        run: contrib/actions/run-build.sh brcm2708-bcm2709

      - name: Archive build logs
        if: ${{ !cancelled() }}
        uses: actions/upload-artifact@v2
        with:
          name: brcm2708-bcm2709_logs
          path: gluon/openwrt/logs

      - name: Archive build output
        uses: actions/upload-artifact@v2
        with:
          name: brcm2708-bcm2709_output
          path: gluon/output
      
      - name: build-tar
        run: tar cJf brcm2708-bcm2709.tar.xz -C gluon/output .
      
      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }} 
          asset_path: ./brcm2708-bcm2709.tar.xz
          asset_name: brcm2708-bcm2709.tar.xz
          asset_content_type: application/x-xz

  ipq40xx-generic:
    name: ipq40xx-generic
    runs-on: ubuntu-latest
    needs: create-release
    steps:
      
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set GLUON_BRANCH environment variable
        run: echo ::set-env name=GLUON_BRANCH::master

      - name: Set GLUON_RELEASE environment variable
        run: echo ::set-env name=GLUON_RELEASE::${BUILD_VERSION:-XX}+${GLUON_BRANCH:-master}$(date '+%Y%m%d%H%M')
        env:
          BUILD_VERSION: ${{ needs.create-release.outputs.tag_name }}

      - name: Install apt Dependencies
        run: sudo contrib/actions/setup-dependencies.sh

      - name: Build
        run: contrib/actions/run-build.sh ipq40xx-generic

      - name: Archive build logs
        if: ${{ !cancelled() }}
        uses: actions/upload-artifact@v2
        with:
          name: ipq40xx-generic_logs
          path: gluon/openwrt/logs

      - name: Archive build output
        uses: actions/upload-artifact@v2
        with:
          name: ipq40xx-generic_output
          path: gluon/output
      
      - name: build-tar
        run: tar cJf ipq40xx-generic.tar.xz -C gluon/output .
      
      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }} 
          asset_path: ./ipq40xx-generic.tar.xz
          asset_name: ipq40xx-generic.tar.xz
          asset_content_type: application/x-xz

  ipq806x-generic:
    name: ipq806x-generic
    runs-on: ubuntu-latest
    needs: create-release
    steps:
      
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set GLUON_BRANCH environment variable
        run: echo ::set-env name=GLUON_BRANCH::master

      - name: Set GLUON_RELEASE environment variable
        run: echo ::set-env name=GLUON_RELEASE::${BUILD_VERSION:-XX}+${GLUON_BRANCH:-master}$(date '+%Y%m%d%H%M')
        env:
          BUILD_VERSION: ${{ needs.create-release.outputs.tag_name }}

      - name: Install apt Dependencies
        run: sudo contrib/actions/setup-dependencies.sh

      - name: Build
        run: contrib/actions/run-build.sh ipq806x-generic

      - name: Archive build logs
        if: ${{ !cancelled() }}
        uses: actions/upload-artifact@v2
        with:
          name: ipq806x-generic_logs
          path: gluon/openwrt/logs

      - name: Archive build output
        uses: actions/upload-artifact@v2
        with:
          name: ipq806x-generic_output
          path: gluon/output
      
      - name: build-tar
        run: tar cJf ipq806x-generic.tar.xz -C gluon/output .
      
      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }} 
          asset_path: ./ipq806x-generic.tar.xz
          asset_name: ipq806x-generic.tar.xz
          asset_content_type: application/x-xz

  lantiq-xrx200:
    name: lantiq-xrx200
    runs-on: ubuntu-latest
    needs: create-release
    steps:
      
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set GLUON_BRANCH environment variable
        run: echo ::set-env name=GLUON_BRANCH::master

      - name: Set GLUON_RELEASE environment variable
        run: echo ::set-env name=GLUON_RELEASE::${BUILD_VERSION:-XX}+${GLUON_BRANCH:-master}$(date '+%Y%m%d%H%M')
        env:
          BUILD_VERSION: ${{ needs.create-release.outputs.tag_name }}

      - name: Install apt Dependencies
        run: sudo contrib/actions/setup-dependencies.sh

      - name: Build
        run: contrib/actions/run-build.sh lantiq-xrx200

      - name: Archive build logs
        if: ${{ !cancelled() }}
        uses: actions/upload-artifact@v2
        with:
          name: lantiq-xrx200_logs
          path: gluon/openwrt/logs

      - name: Archive build output
        uses: actions/upload-artifact@v2
        with:
          name: lantiq-xrx200_output
          path: gluon/output
      
      - name: build-tar
        run: tar cJf lantiq-xrx200.tar.xz -C gluon/output .
      
      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }} 
          asset_path: ./lantiq-xrx200.tar.xz
          asset_name: lantiq-xrx200.tar.xz
          asset_content_type: application/x-xz

  lantiq-xway:
    name: lantiq-xway
    runs-on: ubuntu-latest
    needs: create-release
    steps:
      
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set GLUON_BRANCH environment variable
        run: echo ::set-env name=GLUON_BRANCH::master

      - name: Set GLUON_RELEASE environment variable
        run: echo ::set-env name=GLUON_RELEASE::${BUILD_VERSION:-XX}+${GLUON_BRANCH:-master}$(date '+%Y%m%d%H%M')
        env:
          BUILD_VERSION: ${{ needs.create-release.outputs.tag_name }}

      - name: Install apt Dependencies
        run: sudo contrib/actions/setup-dependencies.sh

      - name: Build
        run: contrib/actions/run-build.sh lantiq-xway

      - name: Archive build logs
        if: ${{ !cancelled() }}
        uses: actions/upload-artifact@v2
        with:
          name: lantiq-xway_logs
          path: gluon/openwrt/logs

      - name: Archive build output
        uses: actions/upload-artifact@v2
        with:
          name: lantiq-xway_output
          path: gluon/output
      
      - name: build-tar
        run: tar cJf lantiq-xway.tar.xz -C gluon/output .
      
      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }} 
          asset_path: ./lantiq-xway.tar.xz
          asset_name: lantiq-xway.tar.xz
          asset_content_type: application/x-xz

  mpc85xx-generic:
    name: mpc85xx-generic
    runs-on: ubuntu-latest
    needs: create-release
    steps:
      
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set GLUON_BRANCH environment variable
        run: echo ::set-env name=GLUON_BRANCH::master

      - name: Set GLUON_RELEASE environment variable
        run: echo ::set-env name=GLUON_RELEASE::${BUILD_VERSION:-XX}+${GLUON_BRANCH:-master}$(date '+%Y%m%d%H%M')
        env:
          BUILD_VERSION: ${{ needs.create-release.outputs.tag_name }}

      - name: Install apt Dependencies
        run: sudo contrib/actions/setup-dependencies.sh

      - name: Build
        run: contrib/actions/run-build.sh mpc85xx-generic

      - name: Archive build logs
        if: ${{ !cancelled() }}
        uses: actions/upload-artifact@v2
        with:
          name: mpc85xx-generic_logs
          path: gluon/openwrt/logs

      - name: Archive build output
        uses: actions/upload-artifact@v2
        with:
          name: mpc85xx-generic_output
          path: gluon/output
      
      - name: build-tar
        run: tar cJf mpc85xx-generic.tar.xz -C gluon/output .
      
      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }} 
          asset_path: ./mpc85xx-generic.tar.xz
          asset_name: mpc85xx-generic.tar.xz
          asset_content_type: application/x-xz

  mpc85xx-p1020:
    name: mpc85xx-p1020
    runs-on: ubuntu-latest
    needs: create-release
    steps:
      
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set GLUON_BRANCH environment variable
        run: echo ::set-env name=GLUON_BRANCH::master

      - name: Set GLUON_RELEASE environment variable
        run: echo ::set-env name=GLUON_RELEASE::${BUILD_VERSION:-XX}+${GLUON_BRANCH:-master}$(date '+%Y%m%d%H%M')
        env:
          BUILD_VERSION: ${{ needs.create-release.outputs.tag_name }}

      - name: Install apt Dependencies
        run: sudo contrib/actions/setup-dependencies.sh

      - name: Build
        run: contrib/actions/run-build.sh mpc85xx-p1020

      - name: Archive build logs
        if: ${{ !cancelled() }}
        uses: actions/upload-artifact@v2
        with:
          name: mpc85xx-p1020_logs
          path: gluon/openwrt/logs

      - name: Archive build output
        uses: actions/upload-artifact@v2
        with:
          name: mpc85xx-p1020_output
          path: gluon/output
      
      - name: build-tar
        run: tar cJf mpc85xx-p1020.tar.xz -C gluon/output .
      
      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }} 
          asset_path: ./mpc85xx-p1020.tar.xz
          asset_name: mpc85xx-p1020.tar.xz
          asset_content_type: application/x-xz

  ramips-mt7620:
    name: ramips-mt7620
    runs-on: ubuntu-latest
    needs: create-release
    steps:
      
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set GLUON_BRANCH environment variable
        run: echo ::set-env name=GLUON_BRANCH::master

      - name: Set GLUON_RELEASE environment variable
        run: echo ::set-env name=GLUON_RELEASE::${BUILD_VERSION:-XX}+${GLUON_BRANCH:-master}$(date '+%Y%m%d%H%M')
        env:
          BUILD_VERSION: ${{ needs.create-release.outputs.tag_name }}

      - name: Install apt Dependencies
        run: sudo contrib/actions/setup-dependencies.sh

      - name: Build
        run: contrib/actions/run-build.sh ramips-mt7620

      - name: Archive build logs
        if: ${{ !cancelled() }}
        uses: actions/upload-artifact@v2
        with:
          name: ramips-mt7620_logs
          path: gluon/openwrt/logs

      - name: Archive build output
        uses: actions/upload-artifact@v2
        with:
          name: ramips-mt7620_output
          path: gluon/output
      
      - name: build-tar
        run: tar cJf ramips-mt7620.tar.xz -C gluon/output .
      
      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }} 
          asset_path: ./ramips-mt7620.tar.xz
          asset_name: ramips-mt7620.tar.xz
          asset_content_type: application/x-xz

  ramips-mt7621:
    name: ramips-mt7621
    runs-on: ubuntu-latest
    needs: create-release
    steps:
      
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set GLUON_BRANCH environment variable
        run: echo ::set-env name=GLUON_BRANCH::master

      - name: Set GLUON_RELEASE environment variable
        run: echo ::set-env name=GLUON_RELEASE::${BUILD_VERSION:-XX}+${GLUON_BRANCH:-master}$(date '+%Y%m%d%H%M')
        env:
          BUILD_VERSION: ${{ needs.create-release.outputs.tag_name }}

      - name: Install apt Dependencies
        run: sudo contrib/actions/setup-dependencies.sh

      - name: Build
        run: contrib/actions/run-build.sh ramips-mt7621

      - name: Archive build logs
        if: ${{ !cancelled() }}
        uses: actions/upload-artifact@v2
        with:
          name: ramips-mt7621_logs
          path: gluon/openwrt/logs

      - name: Archive build output
        uses: actions/upload-artifact@v2
        with:
          name: ramips-mt7621_output
          path: gluon/output
      
      - name: build-tar
        run: tar cJf ramips-mt7621.tar.xz -C gluon/output .
      
      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }} 
          asset_path: ./ramips-mt7621.tar.xz
          asset_name: ramips-mt7621.tar.xz
          asset_content_type: application/x-xz

  ramips-mt76x8:
    name: ramips-mt76x8
    runs-on: ubuntu-latest
    needs: create-release
    steps:
      
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set GLUON_BRANCH environment variable
        run: echo ::set-env name=GLUON_BRANCH::master

      - name: Set GLUON_RELEASE environment variable
        run: echo ::set-env name=GLUON_RELEASE::${BUILD_VERSION:-XX}+${GLUON_BRANCH:-master}$(date '+%Y%m%d%H%M')
        env:
          BUILD_VERSION: ${{ needs.create-release.outputs.tag_name }}

      - name: Install apt Dependencies
        run: sudo contrib/actions/setup-dependencies.sh

      - name: Build
        run: contrib/actions/run-build.sh ramips-mt76x8

      - name: Archive build logs
        if: ${{ !cancelled() }}
        uses: actions/upload-artifact@v2
        with:
          name: ramips-mt76x8_logs
          path: gluon/openwrt/logs

      - name: Archive build output
        uses: actions/upload-artifact@v2
        with:
          name: ramips-mt76x8_output
          path: gluon/output
      
      - name: build-tar
        run: tar cJf ramips-mt76x8.tar.xz -C gluon/output .
      
      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }} 
          asset_path: ./ramips-mt76x8.tar.xz
          asset_name: ramips-mt76x8.tar.xz
          asset_content_type: application/x-xz

  ramips-rt305x:
    name: ramips-rt305x
    runs-on: ubuntu-latest
    needs: create-release
    steps:
      
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set GLUON_BRANCH environment variable
        run: echo ::set-env name=GLUON_BRANCH::master

      - name: Set GLUON_RELEASE environment variable
        run: echo ::set-env name=GLUON_RELEASE::${BUILD_VERSION:-XX}+${GLUON_BRANCH:-master}$(date '+%Y%m%d%H%M')
        env:
          BUILD_VERSION: ${{ needs.create-release.outputs.tag_name }}

      - name: Install apt Dependencies
        run: sudo contrib/actions/setup-dependencies.sh

      - name: Build
        run: contrib/actions/run-build.sh ramips-rt305x

      - name: Archive build logs
        if: ${{ !cancelled() }}
        uses: actions/upload-artifact@v2
        with:
          name: ramips-rt305x_logs
          path: gluon/openwrt/logs

      - name: Archive build output
        uses: actions/upload-artifact@v2
        with:
          name: ramips-rt305x_output
          path: gluon/output
      
      - name: build-tar
        run: tar cJf ramips-rt305x.tar.xz -C gluon/output .
      
      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }} 
          asset_path: ./ramips-rt305x.tar.xz
          asset_name: ramips-rt305x.tar.xz
          asset_content_type: application/x-xz

  sunxi-cortexa7:
    name: sunxi-cortexa7
    runs-on: ubuntu-latest
    needs: create-release
    steps:
      
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set GLUON_BRANCH environment variable
        run: echo ::set-env name=GLUON_BRANCH::master

      - name: Set GLUON_RELEASE environment variable
        run: echo ::set-env name=GLUON_RELEASE::${BUILD_VERSION:-XX}+${GLUON_BRANCH:-master}$(date '+%Y%m%d%H%M')
        env:
          BUILD_VERSION: ${{ needs.create-release.outputs.tag_name }}

      - name: Install apt Dependencies
        run: sudo contrib/actions/setup-dependencies.sh

      - name: Build
        run: contrib/actions/run-build.sh sunxi-cortexa7

      - name: Archive build logs
        if: ${{ !cancelled() }}
        uses: actions/upload-artifact@v2
        with:
          name: sunxi-cortexa7_logs
          path: gluon/openwrt/logs

      - name: Archive build output
        uses: actions/upload-artifact@v2
        with:
          name: sunxi-cortexa7_output
          path: gluon/output
      
      - name: build-tar
        run: tar cJf sunxi-cortexa7.tar.xz -C gluon/output .
      
      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }} 
          asset_path: ./sunxi-cortexa7.tar.xz
          asset_name: sunxi-cortexa7.tar.xz
          asset_content_type: application/x-xz

  x86-generic:
    name: x86-generic
    runs-on: ubuntu-latest
    needs: create-release
    steps:
      
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set GLUON_BRANCH environment variable
        run: echo ::set-env name=GLUON_BRANCH::master

      - name: Set GLUON_RELEASE environment variable
        run: echo ::set-env name=GLUON_RELEASE::${BUILD_VERSION:-XX}+${GLUON_BRANCH:-master}$(date '+%Y%m%d%H%M')
        env:
          BUILD_VERSION: ${{ needs.create-release.outputs.tag_name }}

      - name: Install apt Dependencies
        run: sudo contrib/actions/setup-dependencies.sh

      - name: Build
        run: contrib/actions/run-build.sh x86-generic

      - name: Archive build logs
        if: ${{ !cancelled() }}
        uses: actions/upload-artifact@v2
        with:
          name: x86-generic_logs
          path: gluon/openwrt/logs

      - name: Archive build output
        uses: actions/upload-artifact@v2
        with:
          name: x86-generic_output
          path: gluon/output
      
      - name: build-tar
        run: tar cJf x86-generic.tar.xz -C gluon/output .
      
      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }} 
          asset_path: ./x86-generic.tar.xz
          asset_name: x86-generic.tar.xz
          asset_content_type: application/x-xz

  x86-geode:
    name: x86-geode
    runs-on: ubuntu-latest
    needs: create-release
    steps:
      
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set GLUON_BRANCH environment variable
        run: echo ::set-env name=GLUON_BRANCH::master

      - name: Set GLUON_RELEASE environment variable
        run: echo ::set-env name=GLUON_RELEASE::${BUILD_VERSION:-XX}+${GLUON_BRANCH:-master}$(date '+%Y%m%d%H%M')
        env:
          BUILD_VERSION: ${{ needs.create-release.outputs.tag_name }}

      - name: Install apt Dependencies
        run: sudo contrib/actions/setup-dependencies.sh

      - name: Build
        run: contrib/actions/run-build.sh x86-geode

      - name: Archive build logs
        if: ${{ !cancelled() }}
        uses: actions/upload-artifact@v2
        with:
          name: x86-geode_logs
          path: gluon/openwrt/logs

      - name: Archive build output
        uses: actions/upload-artifact@v2
        with:
          name: x86-geode_output
          path: gluon/output
      
      - name: build-tar
        run: tar cJf x86-geode.tar.xz -C gluon/output .
      
      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }} 
          asset_path: ./x86-geode.tar.xz
          asset_name: x86-geode.tar.xz
          asset_content_type: application/x-xz

  x86-legacy:
    name: x86-legacy
    runs-on: ubuntu-latest
    needs: create-release
    steps:
      
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set GLUON_BRANCH environment variable
        run: echo ::set-env name=GLUON_BRANCH::master

      - name: Set GLUON_RELEASE environment variable
        run: echo ::set-env name=GLUON_RELEASE::${BUILD_VERSION:-XX}+${GLUON_BRANCH:-master}$(date '+%Y%m%d%H%M')
        env:
          BUILD_VERSION: ${{ needs.create-release.outputs.tag_name }}

      - name: Install apt Dependencies
        run: sudo contrib/actions/setup-dependencies.sh

      - name: Build
        run: contrib/actions/run-build.sh x86-legacy

      - name: Archive build logs
        if: ${{ !cancelled() }}
        uses: actions/upload-artifact@v2
        with:
          name: x86-legacy_logs
          path: gluon/openwrt/logs

      - name: Archive build output
        uses: actions/upload-artifact@v2
        with:
          name: x86-legacy_output
          path: gluon/output
      
      - name: build-tar
        run: tar cJf x86-legacy.tar.xz -C gluon/output .
      
      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }} 
          asset_path: ./x86-legacy.tar.xz
          asset_name: x86-legacy.tar.xz
          asset_content_type: application/x-xz

  x86-64:
    name: x86-64
    runs-on: ubuntu-latest
    needs: create-release
    steps:
      
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set GLUON_BRANCH environment variable
        run: echo ::set-env name=GLUON_BRANCH::master

      - name: Set GLUON_RELEASE environment variable
        run: echo ::set-env name=GLUON_RELEASE::${BUILD_VERSION:-XX}+${GLUON_BRANCH:-master}$(date '+%Y%m%d%H%M')
        env:
          BUILD_VERSION: ${{ needs.create-release.outputs.tag_name }}

      - name: Install apt Dependencies
        run: sudo contrib/actions/setup-dependencies.sh

      - name: Build
        run: contrib/actions/run-build.sh x86-64

      - name: Archive build logs
        if: ${{ !cancelled() }}
        uses: actions/upload-artifact@v2
        with:
          name: x86-64_logs
          path: gluon/openwrt/logs

      - name: Archive build output
        uses: actions/upload-artifact@v2
        with:
          name: x86-64_output
          path: gluon/output
      
      - name: build-tar
        run: tar cJf x86-64.tar.xz -C gluon/output .
      
      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }} 
          asset_path: ./x86-64.tar.xz
          asset_name: x86-64.tar.xz
          asset_content_type: application/x-xz

